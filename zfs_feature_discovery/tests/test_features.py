import stat

import aiofiles
import aiofiles.os
import pytest
from pytest import TempPathFactory

from zfs_feature_discovery.features import FeatureManager
from zfs_feature_discovery.zpool import ZpoolManager

from .conftest import read_all_labels


@pytest.fixture(scope="function")
def feature_manager(
    tmp_path_factory: TempPathFactory,
    zpool_test_props: frozenset[str],
    zfs_dataset_test_props: frozenset[str],
) -> FeatureManager:
    fm = FeatureManager(
        feature_dir=tmp_path_factory.mktemp("features-"),
        zpool_props=zpool_test_props,
        zfs_dataset_props=zfs_dataset_test_props,
        label_namespace="me.danielkza.io/test",
        zpool_label_format="zpool/{pool_name}.{property_name}",
        zfs_dataset_label_format="zfs-dataset/{pool_name}/{dataset_name}.{property_name}",
    )
    return fm


@pytest.mark.asyncio
@pytest.mark.usefixtures("mock_zpool_properties")
async def test_zpool_write_features(
    feature_manager: FeatureManager, zpool: ZpoolManager
) -> None:
    async with feature_manager:
        feature_manager.register_zpool(zpool)

        await feature_manager.refresh_all_zpools()

    all_labels = await read_all_labels(feature_manager.feature_dir)
    assert all_labels == {
        "me.danielkza.io/test/zpool/rpool.readonly": "off",
        "me.danielkza.io/test/zpool/rpool.size": "944892805120",
        "me.danielkza.io/test/zpool/rpool.health": "ONLINE",
        "me.danielkza.io/test/zpool/rpool.guid": "2706753758230323468",
        "me.danielkza.io/test/zpool/rpool.feature@async_destroy": "enabled",
    }


@pytest.mark.asyncio
@pytest.mark.usefixtures("mock_zfs_dataset_properties")
async def test_zfs_dataset_write_features(
    feature_manager: FeatureManager, zpool: ZpoolManager
) -> None:
    async with feature_manager:
        feature_manager.register_zpool(zpool)

        await feature_manager.refresh_zpool_datasets(zpool)

    all_labels = await read_all_labels(feature_manager.feature_dir)
    assert all_labels == {
        "me.danielkza.io/test/zfs-dataset/rpool/test1.readonly": "off",
        "me.danielkza.io/test/zfs-dataset/rpool/test1.volsize": "",
        "me.danielkza.io/test/zfs-dataset/rpool/test1.volblocksize": "",
        "me.danielkza.io/test/zfs-dataset/rpool/test1.recordsize": "131072",
        "me.danielkza.io/test/zfs-dataset/rpool/test1.type": "filesystem",
        "me.danielkza.io/test/zfs-dataset/rpool/test1.guid": "2574342567579829017",
        "me.danielkza.io/test/zfs-dataset/rpool/zvol1.readonly": "off",
        "me.danielkza.io/test/zfs-dataset/rpool/zvol1.volsize": "10737418240",
        "me.danielkza.io/test/zfs-dataset/rpool/zvol1.volblocksize": "16384",
        "me.danielkza.io/test/zfs-dataset/rpool/zvol1.recordsize": "",
        "me.danielkza.io/test/zfs-dataset/rpool/zvol1.type": "volume",
        "me.danielkza.io/test/zfs-dataset/rpool/zvol1.guid": "2814323311404247512",
        "me.danielkza.io/test/zfs-dataset/rpool/test2.readonly": "off",
        "me.danielkza.io/test/zfs-dataset/rpool/test2.volsize": "",
        "me.danielkza.io/test/zfs-dataset/rpool/test2.volblocksize": "",
        "me.danielkza.io/test/zfs-dataset/rpool/test2.recordsize": "131072",
        "me.danielkza.io/test/zfs-dataset/rpool/test2.type": "filesystem",
        "me.danielkza.io/test/zfs-dataset/rpool/test2.guid": "2574342567579829017",
    }


@pytest.mark.asyncio
@pytest.mark.usefixtures("mock_zpool_properties")
@pytest.mark.parametrize("zpool_datasets", [[]])
async def test_zpool_no_datasets_write_features(
    feature_manager: FeatureManager, zpool: ZpoolManager
) -> None:
    async with feature_manager:
        feature_manager.register_zpool(zpool)

        await feature_manager.refresh_all_zpools()

    all_labels = await read_all_labels(feature_manager.feature_dir)
    assert all_labels == {
        "me.danielkza.io/test/zpool/rpool.readonly": "off",
        "me.danielkza.io/test/zpool/rpool.size": "944892805120",
        "me.danielkza.io/test/zpool/rpool.health": "ONLINE",
        "me.danielkza.io/test/zpool/rpool.guid": "2706753758230323468",
        "me.danielkza.io/test/zpool/rpool.feature@async_destroy": "enabled",
    }


@pytest.mark.asyncio
@pytest.mark.usefixtures("mock_zpool_properties")
@pytest.mark.parametrize("zpool_datasets", [[]])
async def test_features_cleanup(
    feature_manager: FeatureManager, zpool: ZpoolManager
) -> None:
    # write an extra file in the feature dir, check that it will get erased

    feature_file = feature_manager.feature_dir / "zfs-rubbish"
    async with aiofiles.open(feature_file, "w") as f:
        await f.write(
            """
# Generated by zfs-feature-discovery
rubbish=rubbish
"""
        )

    # This just makes sure we actually wrote correctly, otherwise the next
    # assertion is meaningless
    all_labels = await read_all_labels(feature_manager.feature_dir)
    assert all_labels == {"rubbish": "rubbish"}

    async with feature_manager:
        feature_manager.register_zpool(zpool)

        await feature_manager.refresh()

        all_labels = await read_all_labels(feature_manager.feature_dir)
        assert all_labels == {
            "me.danielkza.io/test/zpool/rpool.readonly": "off",
            "me.danielkza.io/test/zpool/rpool.size": "944892805120",
            "me.danielkza.io/test/zpool/rpool.health": "ONLINE",
            "me.danielkza.io/test/zpool/rpool.guid": "2706753758230323468",
            "me.danielkza.io/test/zpool/rpool.feature@async_destroy": "enabled",
        }


@pytest.mark.asyncio
@pytest.mark.usefixtures("mock_zpool_properties")
@pytest.mark.parametrize("zpool_datasets", [[]])
async def test_features_file_mode(
    feature_manager: FeatureManager, zpool: ZpoolManager
) -> None:
    async with feature_manager:
        feature_manager.register_zpool(zpool)

        await feature_manager.refresh()

        found = False
        for entry in await aiofiles.os.scandir(feature_manager.feature_dir):
            found = True

            file_stat = await aiofiles.os.stat(entry)
            file_mode = stat.S_IMODE(file_stat.st_mode)
            assert file_mode == 0o0644, f"File {entry.path} should have mode 0644"

        assert found, "FeatureManager should generate files"
